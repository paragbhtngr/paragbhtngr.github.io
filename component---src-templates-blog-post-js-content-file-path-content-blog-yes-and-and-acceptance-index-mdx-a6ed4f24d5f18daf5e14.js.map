{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-blog-yes-and-and-acceptance-index-mdx-a6ed4f24d5f18daf5e14.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./content/blog/yes-and-and-acceptance/index.mdx","webpack://gatsby-starter-blog/./src/templates/blog-post.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/container.js","webpack://gatsby-starter-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Since this is my first post talking about improv, I'm going to explain what improv is for a bit. If you're familiar with improv, feel free to skip this paragraph. For the rest, Improv is short for improvisational theatre - a form of collaborative storytelling where no one knows where the story will go. It is different from scripted storytelling in that there is no script, no predetermined characters and no one person knows the full story. A lot of popular improv is associated with comedy, if you've seen \", React.createElement(_components.em, null, \"Whose Line Is It Anyway?\"), \" or perhaps even \", React.createElement(_components.em, null, \"Middleditch and Schwartz\"), \" on Netflix, you may have seen examples of improvised storytelling at work. Yes, a lot of humor can come from the fact that no one really knows what's happening and ridiculous things can happen as a result. It can get more complex than that, but that's good enough for a start.\"), \"\\n\", React.createElement(_components.h4, null, \"What is Yes, And?\"), \"\\n\", React.createElement(_components.p, null, \"If you've been to any improv 101 class, you already know that the cardinal rule of improv is 2 words long: “Yes, And”. It achieves brevity and elegance in a way I wish I could with a lot of my writing, but allow me to expound on what it means a bit for the uninitiated. “Yes, And” is a response to an offer. An offer in improv terms is any piece of information presented within a scene - be it an offer of information about a character in the story, an endowment of a trait or history to your character, exposition about relationships or other characters, or even a suggestion to do something given the situation. Basically, any piece of information that has the potential to move the story forward is an offer. The principle of “yes, and”-ing an offer means that you accept whatever was said and you add to it.\"), \"\\n\", React.createElement(_components.p, null, \"There are various ways to respond to an offer, but yes and is the one that will allow you to move the story forward. Take an example scene: You're sitting down at a table, and your scene partner comes and sits next to you, offers you an apple and says, “Here you go. Can't stand apples. Don't know why they stopped giving us oranges.” That's a pretty good starting offer. It establishes familiarity, details about the partner's character, possibly details about your relationship (that you've known each other for a while and this is not the first time they're giving you their food). Here's how you could react to that:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"No: You reject their offer. This is not an apple. I've never met you in my life.\"), \"\\n\", React.createElement(_components.li, null, \"Yes, but: You recognize their offer but resist it. Thank for the apple but I'm not hungry.\"), \"\\n\", React.createElement(_components.li, null, \"Yes, and: You accept their apple and add to the offer. It's a good thing I love apples then. You remember Gene in grade 5? Turns out she's allergic to oranges. Now the whole school can't have them.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Which one of these responses feels the most satisfying? The no just completely shatters the world that your partner is trying to build. You delegitimize what they're saying and the audience loses suspension of disbelief as they are abruptly brought out of the scene. With a yes but, you are acknowledging that something has happened, but you are refusing to participate in moving forward. Now the scene can still happen around you, but the more you push back the harder it is to work with you. Now, the yes and. That not only accepts but adds to the scene in a constructive manner. It builds the scene further. And there isn't really such a thing as a bad offer. Consider the following other offers:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Thanks, Pete. At least they're still giving us some fruit. Given how much the warden's been skimming of the top I'm surprised we're getting fed at all.\"), \"\\n\", React.createElement(_components.li, null, \"Yes, Hera. I'm afraid Demeter has not been kind to them this harvest. Don't worry, should their libations not increase, I shall smite them soon.\"), \"\\n\", React.createElement(_components.li, null, \"Sorry, honey. The fruit materialotron-3000 is broken and the droids haven't gotten around to fixing it yet. I shall have to jetpack over to the store, hopefully we still have our warranty records.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I could go on, but you see how none of these offers have anything in common with each other apart from the fact that they acknowledge and accept everything that has been established so far. So there are no such things as bad offers really, so long as they acknowledge everything that has happened before them. I'd like to point out something, whether you accept the apple or not is irrelevant. A misconception regarding yes, and-ing is that we must become some Yes Man like caricature of a person saying yes to everything without thinking. That's hardly the case. Saying yes is about acknowledging and accepting that things have happened.\"), \"\\n\", React.createElement(_components.h4, null, \"The 5 Stages of Grief\"), \"\\n\", React.createElement(_components.p, null, \"Yup, I don't really do transitional material. Let's dive right into our traumas.\"), \"\\n\", React.createElement(_components.p, null, \"The 5 stages of grief, according to the Kubler-Ross Grief cycle are as follows: Denial, Anger, Bargaining, Depression and Acceptance. For growth to happen, we need to accept our traumas and move on. Let me reframe this in improv terms:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Denial:\"), \" No. This is not happening. This is not true. You're delusional.\"), \"\\n\", React.createElement(_components.p, null, \"You very rarely see improv scenes that go this off the rails, because most people who are in an improv scene are at least aware that they are in a scene. Denial comes from a complete lack of awareness that anything is wrong, or a blatant refusal to even consider it. This would be like me trying to do an improv scene with a person sitting on the subway without any context. Yeah they think I'm a crazy person. In their sense of reality, they have no idea that they're in a scene. Normally, with improvisers, you get some of the later problems.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Anger:\"), \" No. This is not allowed to happen. I refuse to accept that this is true.\"), \"\\n\", React.createElement(_components.p, null, \"With a lot of beginner (and sometimes even experienced) improvisers, you get conflict very early in a scene. If people fought in real life as much as they did in an improv 101 class, these people would be very unpleasant to hang out with. But why does conflict arise in a scene. Say, instead of offering an apple in that first scene, the scene partner had said, \\\"Sorry we're out of oranges\\\". Instead of an opportunity as an offer, I've given you a problem as an offer. Performing theatre without lines in front of dozens of people is, for most people, a stressful situation. In a stressful problem solving situation, a fight or flight response is common. Instead of figuring out what to do next, the first instinct is to assign blame. Clearly, it's the person who made the offer. Thus, conflict ensues.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Bargaining:\"), \" Yes, but can it not be this bad? Can it be less like it is?\"), \"\\n\", React.createElement(_components.p, null, \"Probably the most common type of scene (apart from conflict) that you will see a problem devolve into is a negotiation. A negotiation is the conflict-avoidant person's way of not dealing with a problem they're aware of. Maybe the person who offered the problem can be persuaded to reconsider their problem and reduce it so that it's less of a problem. We don't have oranges? Can you check again? Can you ask them nicely? Is there some sequence of people-pleasing conflict-avoidant actions I can take so that this problem doesn't exist anymore in the scene? A lot of what people think of as problem-solving is actually trying to negotiate their way out of a problem. This makes for boring theatre. It also makes for a person who avoids having to deal with a problem by negotiating their way out of it. Doesn't make for character growth.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Depression:\"), \" Yes. Sigh. What's the point?\"), \"\\n\", React.createElement(_components.p, null, \"We've gotten close to a Yes, and. We've got to an unqualified yes, finally. An acceptance of the situation without trying to weasel our way out of it. But we blame ourselves. You rarely see depression manifest itself on the stage, because anyone who's that comfortable with being vulnerable on stage generally has a firm grasp of how to grow out of it. Most poor improv scenes will not reach this stage, but flit around the first 3 stages. This stage is more prevalent in our personal lives, where we accept reality, but languish in it to punish ourselves. Given that we can't find anyone else to blame, it becomes our fault. There is a lot more to getting out of this stage than can be covered here - perhaps another post for this in and of itself.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Acceptance:\"), \" Yes, and. What's next?\"), \"\\n\", React.createElement(_components.p, null, \"We've finally reached yes, and. The acceptance of our reality without denying it, trying to fight it or languishing in it. The ability to accept and move on from every situation and as what happens next is a struggle. But saying yes and to things makes it a habit, a sort of mindset even. If you choose to apply that attitude to everything, you become unfazed by things. Unfazed isn't the same thing as numb, by the way. You still feel emotions and grief, but you bounce back from grief a lot quicker. You process, you accept, and you build on what is.\"), \"\\n\", React.createElement(_components.h4, null, \"Applying it all\"), \"\\n\", React.createElement(_components.p, null, \"An interesting thing that happens with improvisers is identity split. I know some phenomenal improvisers who have mastered the ability to yes and things on stage but struggle with it in real life. I face some difficulty doing that myself as a matter of fact, so I understand some of the challenges. The main challenges that I've noticed are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Lack of being able to explore who we are the way we explore our characters\"), \"\\n\", React.createElement(_components.li, null, \"Failure in an improv scene is different from failure in real life\"), \"\\n\", React.createElement(_components.li, null, \"Feeling lack of agency and power in our lives compared to an improv scene\"), \"\\n\", React.createElement(_components.li, null, \"Consistency of experiences in improv vs inconsistency in real life\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I want to continue to explore some of these ideas, hopefully growing myself in the process, but that's for another time in another post.\"), \"\\n\", React.createElement(_components.p, null, \"And Scene.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/parag/Github/personal-website/my-blog-starter/content/blog/yes-and-and-acceptance/index.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport Container from \"../components/container\";\nconst shortcodes = {\n  Link\n};\nconst BlogPostTemplate = ({data: {previous, next, site, mdx}, children, location}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(\"div\", {\n    className: \"w-full max-w-[42rem] m-auto\"\n  }, React.createElement(\"article\", {\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", {\n    itemProp: \"headline\",\n    className: \"text-sky-700\"\n  }, mdx.frontmatter.title), React.createElement(\"p\", null, React.createElement(\"span\", {\n    className: \"inline-block\"\n  }, mdx.frontmatter.date), mdx.frontmatter.categories ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"rounded inline-block bg-black w-1 h-1 mx-1 mb-0.5\"\n  }), React.createElement(\"span\", {\n    className: \"inline-block\"\n  }, mdx.frontmatter.categories.join([\", \"]))) : null)), React.createElement(MDXProvider, {\n    components: shortcodes,\n    localImages: mdx.frontmatter.embeddedImagesLocal\n  }, children), React.createElement(\"hr\"), React.createElement(\"footer\", null, React.createElement(Bio))), React.createElement(\"nav\", {\n    className: \"blog-post-nav\"\n  }, React.createElement(\"ul\", {\n    style: {\n      display: `flex`,\n      flexWrap: `wrap`,\n      justifyContent: `space-between`,\n      listStyle: `none`,\n      padding: 0\n    }\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: previous.frontmatter.slug,\n    rel: \"prev\"\n  }, \"← \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: next.frontmatter.slug,\n    rel: \"next\"\n  }, next.frontmatter.title, \" →\"))))));\n};\nexport const Head = ({data: {mdx}}) => {\n  return React.createElement(Seo, {\n    title: mdx.frontmatter.title,\n    description: mdx.frontmatter.description || mdx.excerpt\n  });\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        embeddedImagesLocal {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n        }\n        categories\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      frontmatter {\n        slug\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      frontmatter {\n        slug\n        title\n      }\n    }\n  }\n`;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport Container from \"./container\"\n\nconst Bio = ({ blueBg }) => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className={blueBg ? `bg-sky-700` : \"\"}>\n      <Container>\n        <div className=\"bio p-10\">\n          {author?.name && (\n            <p className={`${blueBg ? \"text-white\" : \"text-black\"}`}>\n              Written by <strong>{author.name}</strong>{\" \"}\n              {author?.summary || null}\n              {` `}\n              <a\n                className={`${\n                  blueBg ? \"text-white\" : \"text-black\"\n                } underline underline-offset-4`}\n                href={`https://twitter.com/${social?.twitter || ``}`}\n              >\n                You should follow them on Twitter\n              </a>\n            </p>\n          )}\n        </div>\n      </Container>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\n\nfunction Container({ children }) {\n  return (\n    <div className=\"w-full max-w-[42rem] xl:max-w-[64rem] m-auto\">\n      {children}\n    </div>\n  )\n}\n\nexport default Container\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","h4","ul","li","strong","_provideComponents","components","React","wrapper","MDXLayout","shortcodes","Link","BlogPostTemplate","_ref","_site$siteMetadata","data","previous","next","site","mdx","children","location","siteTitle","siteMetadata","title","Layout","className","itemScope","itemType","itemProp","frontmatter","date","categories","join","MDXProvider","localImages","embeddedImagesLocal","Bio","style","display","flexWrap","justifyContent","listStyle","padding","to","slug","rel","Head","_ref2","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","_data$site$siteMetada","_data$site$siteMetada2","blueBg","useStaticQuery","author","social","Container","name","summary","href","twitter","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}