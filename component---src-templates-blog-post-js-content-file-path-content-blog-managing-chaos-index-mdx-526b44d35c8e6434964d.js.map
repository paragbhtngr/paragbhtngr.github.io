{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-blog-managing-chaos-index-mdx-526b44d35c8e6434964d.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./content/blog/managing-chaos/index.mdx","webpack://gatsby-starter-blog/./src/templates/blog-post.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/container.js","webpack://gatsby-starter-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h4: \"h4\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"About 2 years ago, I took my first tentative steps into managing people and tasks. Until then, I had only ever focused on doing what I needed to do and to do it well. From my perspective, having direct responsibility over execution was always easier. Be good at what you need to do, do the tasks assigned to you within the allotted time, and you don't need to worry about much else. At least, this is the way it works when you have a good manager, every one of us should be so lucky. Having indirect responsibility, is a very different ball game. You're not directly responsible for execution but are now reliant on others to get stuff done. You are responsible for prioritizing what needs doing, and unblocking people to make sure stuff gets done on time. There were a lot of lessons learnt, some to apply to my work process, some which I have applied even to my daily life. Here are some of the most significant ones that change the way I do everything.\"), \"\\n\", React.createElement(_components.h4, null, \"Make it tangible: Fail to plan and you plan to fail\"), \"\\n\", React.createElement(_components.p, null, \"If I actually want to get something done now, I always have a tangible action plan on how to achieve it. Breaking a goal down into tangible steps achieves a couple of things\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Marking milestones:\"), \" Working on something long, uncertain and intangible is a daunting process. I get anxious when something feels too nebulous and insurmountable. It starts to create a feeling of helplessness about the process. It's easier to wrap my head around something once I've broken it down into smaller steps. It also makes me feel like I've accomplished something every time I complete a step in the process. The dopamine hit of completing a step also provides me with motivation to move on to the next step of the process.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Spotting assumptions:\"), \" Breaking a task down into tangible steps also makes assumptions obvious. When a step doesn't lead to the next, it's clearer when you write everything down. This will not always guarantee you've thought of everything, and plans can still fail, but it does prevent mistakes from poor planning. Spotting assumptions also makes it clear if you need help with any of the steps. In project-speak, you want to consult the relevant stakeholders and domain knowledge experts. If getting something out there requires marketing effort, you want to make sure to consult marketing while planning. If a feature affects the way another team does something, you want to let them know in advance so that you don't later find out it's impossible. You do not know everything. This helps you figure out what those things are.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Get straight to the point\"), \"\\n\", React.createElement(_components.p, null, \"The biggest difference between being a developer and being a Product Manager is that as a PM your time is not your own. Most of your workday is filled with meetings - getting updates, giving updates, solving problems, letting people know about problems, finding out about new problems about existing things and then if you've got time going to look for problems you don't even know about. The best thing you can do for yourself and for everyone involved is to make meetings quick and productive. Value your time, and value others' time as well.\"), \"\\n\", React.createElement(_components.p, null, \"Here are some time wasters in meetings:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Not sticking to the agenda:\"), \" The quickest way to drag a meeting on longer than is necessary is to lose focus of the point. If there is a a side issue that is worth discussing that is taking too long, schedule a separate meeting to solve it. Invite the relevant people, and address it later. When people lose track of the point you get long meetings where nothing gets resolved.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Meetings to inform:\"), \" Sometimes they are unavoidable, but most meetings that are project updates could have been emails. Unless action is required or something needs to be discussed, send out an email.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Inviting irrelevant people:\"), \" Did everyone who was in the meeting need to be there? Lack of focus doesn't stop at what you talk about - it extends to who you talk about it with. What I've found helpful when thinking about who to involve is the RACI Matrix. RACI stands for:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Responsible:\"), \" The people who actually does the work. Every task needs to have one person responsible for doing the work.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Accountable:\"), \" The people who ensure the work gets done properly. Accountable people may not be doing the work themselves, but they are the people who need to be aware and sign off on anything related to the work.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Consulted:\"), \" People who are not directly involved in making sure the work gets done but are either knowledgeable about the topic, or will be impacted by the work. These people will let you know if you've forgot to account for something.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Informed:\"), \" These people need to be kept in the loop, but they don't need to be aware of every detail of the project.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Remember nothing\"), \"\\n\", React.createElement(_components.p, null, \"I don't mean this in the literal sense of course. I mean, don't rely on memory. While managing projects, sometimes I had 7 or 8 separate things to keep track of within a day. I like to think of myself as someone with a good memory, but by the end of most days I couldn't remember what I had done, let alone what I'm supposed to do tomorrow. What worked for me was to assume I would forget everything unless I wrote it down.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Everything goes on the calendar:\"), \" This may sound dreadful for those who abhor structure and rigidity, but I am useless without a calendar. Every meeting, coffee chat, dinner appointment, board game night, walk in the park - everything goes on my calendar. I use it not only to remember things I have to do months from now, but also to plan my days, weeks and months. While wall-to-wall events may look daunting at first, I use my calendar as more of an aspirational guide rather than a strict regime. It allows me to plan my day, block out time and focus on what's important. Without it, I often find myself overbooked or lacking in purpose for the day. It's also helps when breaking down a project into smaller chunks. If I have an estimate of how long each part of the project will take, and I schedule that in my calendar, it gives me an idea of whether the timeline is possible.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Effective tasks:\"), \" At the end of a meeting, or any discussion, if there was something to do, it would become a task. But there are some things to keep in mind when creating tasks that work:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Always assign someone to the task. I've lost count of the number of times when we thought that a team member would do the work and everyone thought someone else would do it, resulting in it never getting done. When creating a task, always assign it to someone, even if they're not the right person. Someone needs to be responsible for getting it done.\"), \"\\n\", React.createElement(_components.li, null, \"Be clear on what needs to be done. The more vague the task is, the less likely it will be that you will get what you're looking for. The more specific you are about what you need, the easier it will be for everyone to understand what needs to be done.\"), \"\\n\", React.createElement(_components.li, null, \"Always have a due date, even for less important things. It doesn't matter if you need to push something back, you will at least know when to check back on the task. Rather than badgering someone every hour or every day about whether the thing you need is done or not, ask them to say when they can get it done by. Then, leave them alone till the day of, or the day before if the deadline is urgent.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Project Documentation:\"), \" This may sound obvious, but you'd be surprised how often good documentation is lacking on projects. You might think it's a waste of time to document everything, and on super small teams working on one thing you may not see the benefit. When you're working with 6 teams and you have to explain everything to everyone and many people are having discussions about different but overlapping parts of a project, a single document that is the source of truth for the project is essential. Forgot some details about how something works? Go back to the document. Onboarding someone new to work on it? Ask them to go through the documentation. Deprioritizing the project till next year? Good luck remembering where you were without the proper documentation.\"), \"\\n\", React.createElement(_components.p, null, \"Documentation should have information about context - why a project is being done, as well as measurable outcomes from the project. Documentation should also track what is being done, by whom and by when, and what the status of those tasks are. The benchmark of a good project document is when someone who knows nothing about the project can read the document and be ready to work on it.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/parag/Github/personal-website/my-blog-starter/content/blog/managing-chaos/index.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport Container from \"../components/container\";\nconst shortcodes = {\n  Link\n};\nconst BlogPostTemplate = ({data: {previous, next, site, mdx}, children, location}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(\"div\", {\n    className: \"w-full max-w-[42rem] m-auto\"\n  }, React.createElement(\"article\", {\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", {\n    itemProp: \"headline\",\n    className: \"text-sky-700\"\n  }, mdx.frontmatter.title), React.createElement(\"p\", null, React.createElement(\"span\", {\n    className: \"inline-block\"\n  }, mdx.frontmatter.date), mdx.frontmatter.categories ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"rounded inline-block bg-black w-1 h-1 mx-1 mb-0.5\"\n  }), React.createElement(\"span\", {\n    className: \"inline-block\"\n  }, mdx.frontmatter.categories.join([\", \"]))) : null)), React.createElement(MDXProvider, {\n    components: shortcodes,\n    localImages: mdx.frontmatter.embeddedImagesLocal\n  }, children), React.createElement(\"hr\"), React.createElement(\"footer\", null, React.createElement(Bio))), React.createElement(\"nav\", {\n    className: \"blog-post-nav\"\n  }, React.createElement(\"ul\", {\n    className: \"flex justify-between font-bold list-none max-w-[42rem] m-auto px-4\"\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: previous.frontmatter.slug,\n    rel: \"prev\"\n  }, \"← \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: next.frontmatter.slug,\n    rel: \"next\"\n  }, next.frontmatter.title, \" →\"))))));\n};\nexport const Head = ({data: {mdx}}) => {\n  return React.createElement(Seo, {\n    title: mdx.frontmatter.title,\n    description: mdx.frontmatter.description || mdx.excerpt\n  });\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        embeddedImagesLocal {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n        }\n        categories\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      frontmatter {\n        slug\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      frontmatter {\n        slug\n        title\n      }\n    }\n  }\n`;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport Container from \"./container\"\n\nconst Bio = ({ blueBg }) => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className={blueBg ? `bg-sky-700` : \"\"}>\n      <div className=\"bio\">\n        {author?.name && (\n          <p className={`${blueBg ? \"text-white\" : \"text-black\"}`}>\n            Written by {author.name}. {author?.summary || null}\n          </p>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\n\nfunction Container({ fullWidth, className, children }) {\n  return (\n    <div\n      className={`w-full px-4 lg:px-10 ${\n        fullWidth ? \"\" : \"max-w-[42rem] xl:max-w-[80rem]\"\n      } ${className} m-auto`}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Container\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h4","ol","li","strong","ul","_provideComponents","components","React","wrapper","MDXLayout","shortcodes","Link","BlogPostTemplate","_ref","_site$siteMetadata","data","previous","next","site","mdx","children","location","siteTitle","siteMetadata","title","Layout","className","itemScope","itemType","itemProp","frontmatter","date","categories","join","MDXProvider","localImages","embeddedImagesLocal","Bio","to","slug","rel","Head","_ref2","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","_data$site$siteMetada","_data$site$siteMetada2","blueBg","useStaticQuery","author","social","name","summary","fullWidth","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}