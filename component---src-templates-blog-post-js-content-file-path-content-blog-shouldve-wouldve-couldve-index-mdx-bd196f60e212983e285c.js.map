{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-blog-shouldve-wouldve-couldve-index-mdx-bd196f60e212983e285c.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./content/blog/shouldve-wouldve-couldve/index.mdx","webpack://gatsby-starter-blog/./src/templates/blog-post.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/container.js","webpack://gatsby-starter-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h4: \"h4\",\n    em: \"em\",\n    h5: \"h5\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"When we use the words should, would, or could, we are indicating that we are out of touch with reality in some way. What we're saying, effectively, is there is a gap between how be think the world works and how it actually works. I invite you to use these as opportunities to understand your assumptions about the world, and take a look at why you're out of touch with reality. Now, that is a bold thing to say, but hear me out. I might change your mind on this yet.\"), \"\\n\", React.createElement(_components.p, null, \"I say this not as someone who believes they are better, by the way. God knows I've been hilariously out of touch with reality on a number of occasions, and will likely continue to be in the future. But examining my use of words has been an effective tool in understanding my thoughts and beliefs. I love deconstructing the language we use, because to quote George Carlin, “Language gives you away… We think in language. The quality of our thoughts and ideas can only be as good as the quality of our language.” Let's see what these words tell us about ourselves.\"), \"\\n\", React.createElement(_components.h4, null, \"Should\"), \"\\n\", React.createElement(_components.p, null, \"Should indicates an expectation based on our morality. Innocuous or insidious, \", React.createElement(_components.em, null, \"should\"), \" always belies judgement of right and wrong, based on our values. This is the way things \", React.createElement(_components.em, null, \"should\"), \" be. Everyone \", React.createElement(_components.em, null, \"should\"), \" always be nice to one another. Should is the expectant form of the word shall. Well, where do we see the word shall? In the ten commandments - You shall not kill (to paraphrase to modern English) , You shall not steal. Why? It's wrong. \", React.createElement(_components.em, null, \"Should\"), \" expects you to be good, be moral, to uphold the correct values.\"), \"\\n\", React.createElement(_components.p, null, \"This can be an expectation about how the world works if everything is right with it. I parked my bike outside the mall, I locked it before I left, it \", React.createElement(_components.em, null, \"should\"), \" still be there because Singapore is a safe country where no one steals. It could also be an expectation of a person's behaviour based on who they are, and their assumed responsibilities based on the values we ascribe to that role. This is my son, he is filial and loves his parents, he is earning well. He \", React.createElement(_components.em, null, \"should\"), \" take the family out for a nice dinner and pay for everything because that is what loving and filial sons do.\"), \"\\n\", React.createElement(_components.h4, null, \"Would\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"Would\"), \" is similarly filled with expectation, although without the morality. \", React.createElement(_components.em, null, \"Would\"), \" is generally associated with will - the desire / want to do something. While should has an implicit assumption of right and wrong, \", React.createElement(_components.em, null, \"would\"), \" makes no such presumptions. \", React.createElement(_components.em, null, \"Would\"), \" is expectation based on our predictive ability of an event based on what we think we know about a person's desires. To say someone will do something is to have certainty about the actions of a person. To say someone \", React.createElement(_components.em, null, \"would\"), \" do something is an expectation - a probability, not a guarantee.\"), \"\\n\", React.createElement(_components.h4, null, \"Could\"), \"\\n\", React.createElement(_components.p, null, \"While \", React.createElement(_components.em, null, \"should\"), \" is an expectation of adherence to our values, \", React.createElement(_components.em, null, \"would\"), \" is an expectation of a persons desires, \", React.createElement(_components.em, null, \"could\"), \" is an expectation of a persons abilities. \", React.createElement(_components.em, null, \"Could\"), \", the expectant form of can, is an assumption of the ability of someone or something to do what we expect them to do. The intern at the office \", React.createElement(_components.em, null, \"could\"), \" have done a better job of organising this project. \", React.createElement(_components.em, null, \"Could\"), \" gets used a lot in the past tense - as a retrospective assessment rather than a predictive. If we expect someone \", React.createElement(_components.em, null, \"could\"), \" have done something, we usually say they can do it, if we have a strong conviction, or they should be able to do it, when we have assumptions of things having gone right.\"), \"\\n\", React.createElement(_components.h4, null, \"Expectation vs reality\"), \"\\n\", React.createElement(_components.p, null, \"I don't think there is a person alive who hasn't at some point thought through the lens of should, or would, or could. It is natural to have assumptions and expectations of the world. We grow up raised on beliefs and values. We don't empirically test every assumption we have. We take guidance from our parents, our teachers and our friends on how the world works because we trust them to know. Even with science - we don't test out every theory ourselves. The research trickles down to us through research papers, scientific journalism, newspaper articles, videos, getting further and further away from the empirical source of truth, but for most of us, this is fine because we trust the communication.\"), \"\\n\", React.createElement(_components.p, null, \"To say that something \", React.createElement(_components.em, null, \"should have\"), \", \", React.createElement(_components.em, null, \"could have\"), \", or \", React.createElement(_components.em, null, \"would have\"), \" been a certain way indicates a difference between expectation and reality. And it's fine to have that difference. This is how we calibrate our understanding of the world. We learn that the world is not according to our expectation and we change our expectation accordingly - for a while. Then as we grow older and become less tolerant and set in our ways, we slowly stop pushing. We start to expect the world to adhere to our beliefs, and we stop actually looking at the reality of the situation. We stop trying to understand.\"), \"\\n\", React.createElement(_components.p, null, \"When we say something should or shouldn't be a certain way, we stop asking why. Why is the world the way it is? Why was that person rude to me? Why did that person lie? Asking why is the beginning of empathy, because all empathy really is is to understand another person's perspective. I assure you, in their heads no one thinks of themselves as a bad person. Everyone has a justified belief about how they believe they are doing the right thing, or they believe that their circumstances justify whatever they were doing. When we say someone should do something, and don't bother to understand why they're not - what we're really saying is we don't care to put in the effort to understand things from the person's viewpoint.\"), \"\\n\", React.createElement(_components.h4, null, \"Asking why\"), \"\\n\", React.createElement(_components.p, null, \"I've read several articles on why saying \", React.createElement(_components.em, null, \"should\"), \" is a bad thing (interesting to note that there is judgement associated with being judgemental) and how saying \", React.createElement(_components.em, null, \"shall\"), \" or \", React.createElement(_components.em, null, \"will\"), \" or \", React.createElement(_components.em, null, \"ought to\"), \" is better instead. This kind of misses the point, though. The judgement is still there, but now you've buried it under a layer of semantic change. I don't care if you want to be judgemental. But if you choose to examine your expectations, just ask why.\"), \"\\n\", React.createElement(_components.p, null, \"Anytime you say \", React.createElement(_components.em, null, \"should\"), \", \", React.createElement(_components.em, null, \"would\"), \" or \", React.createElement(_components.em, null, \"could\"), \", just ask yourself, why should they? That's all it takes to start is one why. Why should they? Why should I?\"), \"\\n\", React.createElement(_components.h5, null, \"Why should they? Because that's what I would have done:\"), \"\\n\", React.createElement(_components.p, null, \"This is a very common way of thinking about interacting with people when we don't know how to empathise with them. We overlay our way of thinking onto their situation. It seems like a reasonable thing to do, but that person may not have the same circumstances, values or desires. So much free, unsolicited advice is essentially this. You should have kids, because I wanted kids and they made me happy. That's great! But I may be in a very different place in my life right now. You \", React.createElement(_components.em, null, \"should\"), \" do an MBA, because I didn't do an MBA and now I wish I had. Yes, possibly. But have you understood what I want out of life? Maybe our abilities and values are different. Maybe our goals are different. To assume that someone thinks like us is a very dangerous assumption to make.\"), \"\\n\", React.createElement(_components.h5, null, \"Why should they? Because that what is expected of their position\"), \"\\n\", React.createElement(_components.p, null, \"This happens a lot in family and work situations. Situations where a person has a certain responsibility, or there is the perception of responsibility. For example, with colleagues there is a certain expectation that they will do the work that has been assigned to them. So when a person fails to act in accordance with their responsibilities, the urge to say they \", React.createElement(_components.em, null, \"should\"), \" have done something is a natural response. Here are some possible reasons they may not have acted in accordance with expected behaviour:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Is the person aware that this expectation is being placed on them?\"), \" With families, there is often an unspoken assumption of the expectations being put on family members. We expect a lot of our families, often without directly communicating that expectation. We assume that they know what's in our heads, even when we've failed to communicate that clearly\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Has the person willingly accepted the responsibility of this expectation?\"), \" Even when we know that an expectation has been communicated, we do not always ask if this expectation has been willingly accepted. This happens a lot with authority figures - work superiors, parents to children, but it doesn't always have to. As a parent, we may not ask if our child is ready to receive the burden of an expectation, we make that choice for them because we know better. We may not ask our juniors if they are ready to receive the responsibility of the work we are asking them to do. And sometimes, that responsibility can come down to knowing where the boundaries are. There is so much I want to say about the importance of healthy boundaries. As for how it relates to expectations, when someone does not willingly take on a responsibility it becomes an obligation. Those two are not the same, and you will get vastly different results between them.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, null, \"Why should they? Because that's what is right / the law\"), \"\\n\", React.createElement(_components.p, null, \"This is an expectation that someone shares your values and beliefs. In some ways - this is a variant of the previous form, just that their position here is that of a regular person - a human being living in this society. So many assumptions.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Does the person agree with your value system?\"), \" Very often, we get our values from what / who we believe. Growing up in an American Christian household, we might believe that individual freedoms are important, that agency, liberty, and rights to opportunity are more important than obedience, supporting the community, tradition and filial piety - values that a Chinese Taoist household might think are more important. When we live and work with people who come from different backgrounds, we cannot assume they value or care about the same things.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Have you fully understood the person's circumstances?\"), \" Smoking is bad, alcohol is bad, drugs are bad. Most people in privileged circumstances would agree with that. Even smokers and alcoholics. So why do we do it? Try to put yourself in the shoes of a homeless person who doesn't have enough money for food. A cigarette is an appetite suppressant, and a lot cheaper than a meal. Alcohol can keep you warm on a cold night. Drugs can take your mind off the fact that you feel helpless and can't crawl your way out of your circumstances. And having the momentary escape from it might give you enough strength to live another day. So when we judge people for being addicts, or doing things against the law - have we fully appreciated the circumstances that put them there? And if we have, do we think we'd be any better than them?\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"At the risk of dragging this out too much, I'll leave this exercise for could and would to you. I'm sure you understand how this works now - just ask why.\"), \"\\n\", React.createElement(_components.h4, null, \"Is should always bad?\"), \"\\n\", React.createElement(_components.p, null, \"I should point out that this isn't always categorically true. Why? So that I can show you don't have to overthink this, or change your way of speaking completely. I don't want to have you examining every word you say all the time. In fact, you shouldn't need to do anything you don't want to. There! But if you feel like you're disappointed, frustrated or upset that what you believe about the world isn't true - the stuff isn't going the way you expected it to - think about what you believe people \", React.createElement(_components.em, null, \"should\"), \" do, what you believe you \", React.createElement(_components.em, null, \"could\"), \" have done, and what you \", React.createElement(_components.em, null, \"would\"), \" do in future.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/parag/Github/personal-website/my-blog-starter/content/blog/shouldve-wouldve-couldve/index.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport Container from \"../components/container\";\nconst shortcodes = {\n  Link\n};\nconst BlogPostTemplate = ({data: {previous, next, site, mdx}, children, location}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(\"div\", {\n    className: \"w-full max-w-[42rem] m-auto\"\n  }, React.createElement(\"article\", {\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", {\n    itemProp: \"headline\",\n    className: \"text-sky-700\"\n  }, mdx.frontmatter.title), React.createElement(\"p\", null, React.createElement(\"span\", {\n    className: \"inline-block\"\n  }, mdx.frontmatter.date), mdx.frontmatter.categories ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"rounded inline-block bg-black w-1 h-1 mx-1 mb-0.5\"\n  }), React.createElement(\"span\", {\n    className: \"inline-block\"\n  }, mdx.frontmatter.categories.join([\", \"]))) : null)), React.createElement(MDXProvider, {\n    components: shortcodes,\n    localImages: mdx.frontmatter.embeddedImagesLocal\n  }, children), React.createElement(\"hr\"), React.createElement(\"footer\", null, React.createElement(Bio))), React.createElement(\"nav\", {\n    className: \"blog-post-nav\"\n  }, React.createElement(\"ul\", {\n    style: {\n      display: `flex`,\n      flexWrap: `wrap`,\n      justifyContent: `space-between`,\n      listStyle: `none`,\n      padding: 0\n    }\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: previous.frontmatter.slug,\n    rel: \"prev\"\n  }, \"← \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: next.frontmatter.slug,\n    rel: \"next\"\n  }, next.frontmatter.title, \" →\"))))));\n};\nexport const Head = ({data: {mdx}}) => {\n  return React.createElement(Seo, {\n    title: mdx.frontmatter.title,\n    description: mdx.frontmatter.description || mdx.excerpt\n  });\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        embeddedImagesLocal {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n        }\n        categories\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      frontmatter {\n        slug\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      frontmatter {\n        slug\n        title\n      }\n    }\n  }\n`;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport Container from \"./container\"\n\nconst Bio = ({ blueBg }) => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className={blueBg ? `bg-sky-700` : \"\"}>\n      <Container>\n        <div className=\"bio p-10\">\n          {author?.name && (\n            <p className={`${blueBg ? \"text-white\" : \"text-black\"}`}>\n              Written by <strong>{author.name}</strong>{\" \"}\n              {author?.summary || null}\n              {` `}\n              <a\n                className={`${\n                  blueBg ? \"text-white\" : \"text-black\"\n                } underline underline-offset-4`}\n                href={`https://twitter.com/${social?.twitter || ``}`}\n              >\n                You should follow them on Twitter\n              </a>\n            </p>\n          )}\n        </div>\n      </Container>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\n\nfunction Container({ children }) {\n  return (\n    <div className=\"w-full max-w-[42rem] xl:max-w-[64rem] m-auto\">\n      {children}\n    </div>\n  )\n}\n\nexport default Container\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h4","em","h5","ul","li","strong","_provideComponents","components","React","wrapper","MDXLayout","shortcodes","Link","BlogPostTemplate","_ref","_site$siteMetadata","data","previous","next","site","mdx","children","location","siteTitle","siteMetadata","title","Layout","className","itemScope","itemType","itemProp","frontmatter","date","categories","join","MDXProvider","localImages","embeddedImagesLocal","Bio","style","display","flexWrap","justifyContent","listStyle","padding","to","slug","rel","Head","_ref2","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","_data$site$siteMetada","_data$site$siteMetada2","blueBg","useStaticQuery","author","social","Container","name","summary","href","twitter","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}